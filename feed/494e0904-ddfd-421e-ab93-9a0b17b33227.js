{
  "id": "494e0904-ddfd-421e-ab93-9a0b17b33227",
  "title": "学习zepto.js(对象方法)[3]",
  "postDate": "2015-08-18 16:54",
  "content": "<p>继续说zepto里attributes的相关操作.</p><p>attr,removeAttr,prop这三个方法.</p><h2>attr():</h2><p>三种用途</p><h3>get:</h3><p>返回值为一个string字符串</p><pre class=\\\"language-javascript line-numbers\\\"><code>$(\\\"&lt;span id=\\\"special\\\"&gt;&lt;/span&gt;\\\").attr(\\\"id\\\");<span style=\\\"color: #008000;\\\">\\/\\/</span><span style=\\\"color: #008000;\\\">--&gt; \\\"special\\\"</span></code></pre><p><span style=\\\"color: #ff0000;\\\"> 注意:<span style=\\\"color: #000000;\\\">只能返回对象中第一个节点的属性值</span></span></p><h3>set:</h3><p>返回值为一个zepto对象</p><pre class=\\\"language-javascript line-numbers\\\"><code>$(\\\"&lt;span&gt;\\\").attr(\\\"id\\\", \\\"special\\\");<span style=\\\"color: #008000;\\\">\\/\\/</span><span style=\\\"color: #008000;\\\">--&gt; [&lt;span id=\\\"special\\\"&gt;&lt;/span&gt;]</span></code></pre><p>第二个参数也可以传入一个function,有两个参数可以使用</p><p>1:index,zepto对象dom元素数组的下标</p><p>2:value,该对象对应属性的值</p><pre class=\\\"language-javascript line-numbers\\\"><code>$(\\\"&lt;div id=\\'demo1\\'&gt;&lt;/div&gt;\\\").attr(\\\"id\\\",<span style=\\\"color: #0000ff;\\\">function</span><span style=\\\"color: #000000;\\\"> (index, value) {    console.log(index, value);    </span><span style=\\\"color: #008000;\\\">\\/\\/</span><span style=\\\"color: #008000;\\\"> --&gt; 0 demo1</span>});</code></pre><p>上边那段代码如果执行了.那么该zepto对象的id属性值就会被清除,因为该函数没有返回字符串用来设置值.</p><p>或者也可以直接传入一个json串来修改多个属性.</p><pre class=\\\"language-javascript line-numbers\\\"><code>$(\\\"&lt;span&gt;\\\"<span style=\\\"color: #000000;\\\">).attr({    id: </span>\\'special\\'<span style=\\\"color: #000000;\\\">,    name: </span>\\'special\\'<span style=\\\"color: #000000;\\\">});</span></code></pre><h3>remove:</h3><p>返回值也是一个zepto对象,作用相当于调用removeAttr()</p><pre class=\\\"language-javascript line-numbers\\\"><code>$(\\\"&lt;span id=\\\"special\\\"&gt;&lt;/span&gt;\\\").attr(\\\"id\\\", <span style=\\\"color: #0000ff;\\\">null</span>);<span style=\\\"color: #008000;\\\">\\/\\/</span><span style=\\\"color: #008000;\\\">--&gt; [&lt;span&gt;&lt;/span&gt;]</span></code></pre><p>需注意的只能传入null才能触发remove效果.</p><p>传入function与json都可以,只要是返回值或者值为null,都会触发remove;</p><h2>removeAttr:</h2><p>removeAttr相当于(功能)是attr的一部分.但是代码实现是分开的.这个函数应用场景比较单一,所以省去了很多判断.但最终都是调用的function getAttribute(){};</p><p>只接收一个参数,就是name</p><p>返回值是一个zepto对象.</p><pre class=\\\"language-javascript line-numbers\\\"><code>$(\\\"&lt;span id=\\\"special\\\"&gt;&lt;/span&gt;\\\").removeAttr(\\\"id\\\");<span style=\\\"color: #008000;\\\">\\/\\/</span><span style=\\\"color: #008000;\\\">--&gt; [&lt;span&gt;&lt;/span&gt;]</span></code></pre><p> </p><p>移除多个属性请用空格分开</p><h2>prop:</h2><p>prop用来设置或取出dom元素的属性值.功能相当于 (prop = attr - removeAttr);</p><p>prop用法与attr相同.只不过没有remove功能.两者的区别在这里</p><blockquote><p>读取或设置dom元素的属性值。它在读取属性值的情况下优先于 <a href=\\\"http:\\/\\/www.css88.com/doc/zeptojs/#attr\\\">attr</a>，因为这些属性值会因为用户的交互发生改变，如<code>checked</code> 和 <code>selected</code>。</p></blockquote><p>那是zepto.js中文api中所说的.本人认为,在判断有关交互的属性时,应优先使用prop,比如checked和selected;</p><p><img src=\\\"http:\\/\\/images0.cnblogs.com/blog2015/731575/201508/181436274256650.png\\\" alt=\\\"\\\" /><img src=\\\"http:\\/\\/images0.cnblogs.com/blog2015/731575/201508/181436359564944.png\\\" alt=\\\"\\\" /></p><p>之所以为出现差异,是因为两者底层实现的区别.</p><p><img src=\\\"http:\\/\\/images0.cnblogs.com/blog2015/731575/201508/181438556752626.png\\\" alt=\\\"\\\" /></p><p>prop采用的是上边那种,而attr是两种都用到了;</p><p>getAttribute()方法只能取出存在于标签中的属性\\\"&lt;div id name&gt;&lt;/div&gt;\\\" \\/\\/ 只能取出id与name.隐式的属性是取不出来的,比如style</p><p><img src=\\\"http:\\/\\/images0.cnblogs.com/blog2015/731575/201508/181500286286021.png\\\" alt=\\\"\\\" /></p><p><img src=\\\"http:\\/\\/images0.cnblogs.com/blog2015/731575/201508/181500512227417.png\\\" alt=\\\"\\\" /></p><p>来说说实现吧.</p><h3>attr</h3><p>attr返回的那个三元运算符嵌套写的有点虎...待我细细说来;</p><p>--首先判断name参数是否为字符串,并且只有一个实参.这样来讲就是get功能.</p><p>----如果this.length不存在.则说明不是一个zepto对象(理论上),如果数组中第一个对象的nodeType值不为1,则说明不是节点对象.直接返回undefined</p><p>----否则就从调用该节点的getAttribute方法,并赋值给result变量. name in this[0] 这个表达式返回一个bool值.同时将result使用!来转换为bool值.<span style=\\\"line-height: 1.5;\\\">如果没有通过getAttribute方法取出来值,并且该属性存在于节点,</span></p><p>------通过节点直接取值.</p><p>------否则直接返回getAttribute的返回值.</p><p>--剩下来的就是set与remove功能的实现,这两个是支持多对象的操作.返回值均为调用者本身(调用者调用了each循环,循环所有节点对象).</p><p>----如果对象不是一个节点对象,则直接跳过本次循环;</p><p>----如果name为一个object,就是说我们一次性更改多个属性值.这时就循环object对象,来调用setAttribute方法</p><p>----剩下的条件就是给单个属性赋值,之前说过那个funcArg方法,判断第二个参数是否为function类型,如果是则通过当前节点为作用域执行方法,否则直接返回第二个参数.</p><p>关于是否进行set还是remove,这些是在setAttribute方法中做的处理.一个简单的三元运算符;</p><h3>removeAttr</h3><p>参数只有一个,name,就是要移除的属性的名称,</p><p>大体执行过程为,循环调用方法的对象,并将传入的name按空格分割为数组并执行forEach循环,forEach循环传入第二个参数为循环内部this的指向.然后在内部调用setAttribute方法.只传入两个参数,则执行removeAttribute方法;</p><h3>prop</h3><p>参数为两个.第一个固定为属性的名称,第二个可以为一个function,一个字符串.同样,如果不传第二个参数则认为是get,否则是set.</p><p>执行过程与attr的类似,但是attr赋值是通过setAttribute()方法,取值是getAttribute()与对象属性取值的结合.而prop完全操作的是对象的属性;</p><p> </p><p>(这个本来要昨天发的,跟领导谈离职,耽误了.)</p><p> </p><p>再来点吧.说说data方法与val方法.都是操作dom属性的.一气儿说完它;</p><h2>data:</h2><p>方法接受两个参数,第一个是name,第二个为值,如果不填第二个则执行取值,否则为赋值</p><p>用法与attr类似,但是会将传入的name值加上\\\"data-\\\"的前缀,并且会将驼峰命名转换为全小写连字符的格式;</p><p>取值时也不需要加\\\"data-\\\"前缀.</p><p>就是说,</p><pre class=\\\"language-javascript line-numbers\\\"><code>$(\\\"\\\").data(\\\"id\\\");<span style=\\\"color: #008000;\\\">\\/\\/</span><span style=\\\"color: #008000;\\\">取的是 data-id属性的值</span>$(\\\"\\\").data(\\\"userName\\\",\\\"scott\\\");<span style=\\\"color: #008000;\\\">\\/\\/</span><span style=\\\"color: #008000;\\\">给data-user-name属性赋值</span></code></pre><p> </p><p>第二个参数也可以是一个function;</p><p>actually,data方法内部调用的就是attr方法</p><p><img src=\\\"http:\\/\\/images0.cnblogs.com/blog2015/731575/201508/181637547533231.png\\\" alt=\\\"\\\" /></p><p>deserializeValue是一个反序列化函数,如果有其他地方需要,不妨将该方法copy出去;</p><p><img src=\\\"http:\\/\\/images0.cnblogs.com/blog2015/731575/201508/181640125667527.png\\\" alt=\\\"\\\" /></p><h2>val:</h2><p>方法接收一个参数,如果不填,则视为取value值,否则为设置value值.</p><pre class=\\\"language-javascript line-numbers\\\"><code>$(\\\"\\\").val();<span style=\\\"color: #008000;\\\">\\/\\/</span><span style=\\\"color: #008000;\\\"> getter</span>$(\\\"\\\").val(\\\"\\\");<span style=\\\"color: #008000;\\\">\\/\\/</span><span style=\\\"color: #008000;\\\"> setter</span></code></pre><p> </p><p>参数可以是一个字符串,function;function接收的参数为(index[对象的下标],value[对象之前的值]),function需返回一个字符串;</p><p><img src=\\\"http:\\/\\/images0.cnblogs.com/blog2015/731575/201508/181644363006089.png\\\" alt=\\\"\\\" /></p><p>方法本身无亮点,但是返回值有三种;</p><p>一:</p><p>　　返回一个字符串,作为get值时返回;</p><p>二:</p><p>　　返回一个字符串数组,作为get值时返回;</p><p>三:</p><p>　　返回对象本身,作为set值时返回;</p><p>之所以会存在第二种情况,那是因为select(下拉选项)是可以多选的.而开启多选的属性开关名字叫multiple;</p><p>当下拉选项开启多选时,直接通过value属性只会取到第一个值,其余的取不到.所以在代码中就做了处理;</p><p>取出对象所有的option子节点.通过filter方法返回被选中的节点集合,并调用pluck方法</p><p><img src=\\\"http:\\/\\/images0.cnblogs.com/blog2015/731575/201508/181648514412442.png\\\" alt=\\\"\\\" />一个来自prototype.js大表哥中的方法;</p><p>传入一个属性名,将调用者集合中所有的该属性的值作为一个数组返回;</p><p>其余的没什么了.</p><p>如果有什么疑惑的地方还请留言问我.大家共同学习;</p><p>或者<a href=\\\"tencent:\\/\\/QQInterLive/?Cmd=2&amp;Uin=812788037\\\" target=\\\"_blank\\\">我的扣扣</a></p>"
}